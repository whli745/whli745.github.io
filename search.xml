<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[List转Map]]></title>
    <url>%2FList_To_Map%2F</url>
    <content type="text"><![CDATA[序言&nbsp;&nbsp;&nbsp;&nbsp;使用Foreach、Guava、FastJson、JDK 1.8新特性Stream API从List转换为Map的效率对比。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445public class Apple &#123; private Integer id; private String name; private BigDecimal money; private Integer num; public Apple(Integer id, String name, BigDecimal money, Integer num) &#123; this.id = id; this.name = name; this.money = money; this.num = num; &#125; public Integer getId() &#123; return id; &#125; public void setId(Integer id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public BigDecimal getMoney() &#123; return money; &#125; public void setMoney(BigDecimal money) &#123; this.money = money; &#125; public Integer getNum() &#123; return num; &#125; public void setNum(Integer num) &#123; this.num = num; &#125;&#125; JDK1.8 Stream API1Map&lt;Integer, Apple&gt; appleMap = appleList.stream().collect(Collectors.toMap(Apple::getId, a -&gt; a,(k1, k2)-&gt;k1)); Guava123456Map&lt;Integer, Apple&gt; maps = Maps.uniqueIndex(appleList, new Function&lt;Apple, Integer&gt;() &#123; @Override public Integer apply(Apple apple) &#123; return apple.getId(); &#125;&#125;); Foreach1234Map&lt;Integer,Apple&gt; foreachMaps = new HashMap&lt;&gt;();for (Apple apple : appleList)&#123; foreachMaps.put(apple.getId(),apple);&#125; FastJson12345678JSONArray jsonArray = JSONArray.parseArray(JacksonUtils.pojoToJson(appleList));Iterator&lt;Object&gt; iterator = jsonArray.iterator();Map&lt;String,Apple&gt; jacksonMaps = new HashMap&lt;&gt;();while (iterator.hasNext())&#123; JSONObject jsonObject = (JSONObject) iterator.next(); Apple apple = jsonObject.toJavaObject(Apple.class); jacksonMaps.put(apple.getId()+"",apple);&#125; 结果 100：Foreach &gt; Guava &gt; JDK1.8 &gt; FastJson 1000：Foreach &gt; Guava &gt; JDK1.8 &gt; FastJson 10000：Foreach &gt; Guava &gt; JDK1.8 &gt; FastJson 100000：Guava &gt; Foreach &gt; JDK1.8 &gt; FastJson 1000000：JDK1.8 &gt; Foreach &gt; Guava &gt; FastJson]]></content>
      <tags>
        <tag>Java</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JVM学习（二）]]></title>
    <url>%2FJVM_2%2F</url>
    <content type="text"><![CDATA[序言&nbsp;&nbsp;&nbsp;&nbsp;此篇幅探讨HotSpot虚拟机中对象的创建、内存分配、访问定位。 对象的创建&nbsp;&nbsp;&nbsp;&nbsp;Java是一门面向对象的编程语言，在Java程序运行过程中无时无刻都有对象被创建出来。在语言层面，创建对象仅仅只需一个 new 关键字，而在VM中对象的创建包含以下步骤（只限于普通对象，不包括数组和Class对象）： VM遇到一个 new 指令时，首先去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析、初始化]]></content>
      <tags>
        <tag>Java</tag>
        <tag>基础</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JVM学习（一）]]></title>
    <url>%2FJVM_1%2F</url>
    <content type="text"><![CDATA[序言&nbsp;&nbsp;&nbsp;&nbsp;谨此记录本人学习《深入理解Java虚拟机&nbsp;&nbsp;JVM高级特性与最佳实践》第2版一书的总结（基于JDK 1.7）。 运行时数据区域 程序计数器（Program Counter Register） 线程私有，每条线程都有一个独立的程序计数器。 占有较小的内存空间 当前线程的字节码行号指示器；分支、循环、跳转、异常处理、线程恢复等基础功能都使用该计数器 当前线程执行的是Java方法时，计数器记录的是正在执行的VM字节码指令的地址；执行的是Native方法时，计数器值为空（Undefined） 唯一一个在JVM规范中没有规定任何 OutOfMemoryError 情况的区域 虚拟机栈（VM Stack） 线程私有，生命周期和线程相同；为VM使用到的Java方法服务 是对Java方法执行的内存模型描述： 每个方法在执行时都会创建一个栈帧用于局部变量表、操作数栈、动态链接、方法出口等信息的存储 每个方法从调用至执行完成的过程，就对应着一个栈帧在VM Stack中入栈到出栈的过程 局部变量表存放编译期可知的基本数据类型（boolean、byte、char、short、int、float、long、double)、对象引用类型（对象引用指针、句柄或其它与此对象相关的位置）、returnAddress类型（指向了一条字节码指令的地址：函数返回地址）；64位长度的long和double类型的数据占用2个Slot(局部变量空间)，其余的占用1个；方法运行期间不会改变局部变量表的大小 java内存中的常分为堆内存和栈内存，其中的栈内存就可以认为这个VM Stack，或者说是VM Stack中的局部变量表 通过 -Xss 设置栈大小 异常： 如果线程请求的栈深度大于JVM所允许的深度，抛出 StackOverflowError 异常 动态扩展时申请不到足够的内存，抛出 OutOfMemoryError 异常 本地方法栈（Native Method Stack） 线程私有，为VM使用到的Native方法服务 在JVM规范中不对该区域中的方法使用的语言、使用方式与数据结构作强制规定 HotSpot VM直接将Native Method Stack与VM Stack合二为一 异常： 如果线程请求的栈深度大于JVM所允许的深度，抛出 StackOverflowError 异常 动态扩展时申请不到足够的内存，抛出 OutOfMemoryError 异常 Java堆（Java Heap） JVM所管理的内存中最大的一块，在JVM启动时创建 唯一目的就是存放对象实例，几乎所有的对象实例和数组都要在堆上分配（JVM规范中说的是所有的，但是随着JIT编译器的发展和逃逸技术分析的成熟，一些实例可以不在这个区域分配内存） 是GC管理的主要区域，因此也被称为”GC堆” 由于GC收集器采用分代收集算法，Java Heap也细分为：新生代和老年代 Java VM规范规定Java Heap可以处于物理上不连续的Memory空间中 可以实现成固定大小，也可以通过 -Xms -Xmx 来控制实现成可扩展的，当前主流的VM都是按照扩展实现 如果实例在堆中无内存为其分配，并且无法进行扩展时，抛出 OutOfMemoryError 异常 方法区（Method Area） 与Java Heap一样，是各个线程共享的内存区域 用于存储已被VM加载的 类信息、常量、静态变量、即时编译器编译后的代码等数据 虽然JVM规范将方法区描述为堆的一部分，但它有另一个别名叫做”Non-Heap（非堆）” HotSpot虚拟机习惯将方法区称为”永久代（Permanent Generation）”，本质上并不等价，仅因为HotSpot虚拟机选择把GC分代收集扩展至方法区 这个区域的内存回收目标主要是 常量池的回收和对类型的卸载；但回收”成绩”难以令人满意，尤其是类型的卸载 JDK1.7 的HostSpot中，已经将原本放在永久代的字符串常量池移出 它可以通过-XX:PermSize及-XX:MaxPermSize来进行调节。如果它的空间用完了，会导致 java.lang.OutOfMemoryError: PermGenspace 的异常 运行时常量池（Runtime Constant Pool） 方法区的一部分 Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有常量池（Constant Pool Table）信息，用于存放编译期生成的各种常字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放 这部分内存区域JVM规范中没有做任何细节的要求]]></content>
      <tags>
        <tag>Java</tag>
        <tag>基础</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker（二）镜像二]]></title>
    <url>%2Fdocker_2_2%2F</url>
    <content type="text"><![CDATA[前言&nbsp;&nbsp;&nbsp;&nbsp;镜像一阐述了Docker、镜像、容器的定义及与虚拟机的区别；此篇开始真正的进行Docker命令操作，首先让我们从镜像的基本操作命令开始。 搜索镜像 命令搜索 1# docker search 镜像名 Docker官方仓库 拉取镜像1# docker pull 镜像名 此命令拉取镜像的版本为latest。 如须拉取指定版本的镜像，请使用# docker pull 镜像名:版本标签名; 如# docker pull tomcat:7.0.93。 pull的其它选项可以通过docker pull --help进行查看。 列出镜像可参考李卫民老师这篇文章，本人对该文章补充一个命令# docker images，一样可以列出所有镜像。 删除镜像时间有限，待完善······]]></content>
      <tags>
        <tag>docker</tag>
        <tag>容器</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker（二）镜像一]]></title>
    <url>%2Fdocker_2_1%2F</url>
    <content type="text"><![CDATA[写在前面开始后面篇幅时首先要搞明白几点： Docker是什么 镜像、容器分别在Docker中代表什么 容器与虚拟机的区别 该篇针对这几点会进行阐述。 解释及术语Docker是什么Docker是一个开源的，基于容器技术、具备沙箱机制的虚拟化引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、 bare metal、OpenStack集群和其他的基础应用平台。Docker通常用于如下场景： web应用的自动化打包和发布； 自动化测试和持续集成、发布； 在服务型环境中部署和调整数据库或其他的后台应用； 从头编译或者扩展现有的OpenShift或Cloud Foundry平台来搭建自己的PaaS环境。 镜像、容器分别是什么 镜像是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。 容器是镜像的运行时实例 - 实际执行时镜像会在内存中变成什么。默认情况下，它完全独立于主机环境运行，仅在配置为访问主机文件和端口的情况下才执行此操作。 容器与虚拟机的区别虚拟机运行来宾操作系统 - 请注意每个框中的操作系统层。此项为资源密集型，并且生成的磁盘镜像和应用状态与操作系统设置、系统安装的依赖项、操作系统安全补丁以及其他容易丢失且难以复制的临时配置相关联。容器可以共享单个内核，并且需要存在于容器镜像中的唯一信息是可执行文件及其软件包依赖项，这些都不需要在主机系统上安装。这些进程的运行方式类似于原生进程，并且您可以通过运行 docker ps 等命令来逐一管理它们 - 如同您在 Linux 上运行 ps 以查看活动进程一样。最后，由于它们包含所有依赖项，因此不存在配置关联；容器化应用“可以随处运行”。]]></content>
      <tags>
        <tag>docker</tag>
        <tag>容器</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker（一）安装]]></title>
    <url>%2Fdocker_1%2F</url>
    <content type="text"><![CDATA[序言 &nbsp;&nbsp;&nbsp;第一次写博客，可能在具体描述时絮絮叨叨，请各位耐心；Docker系列主要讲解Linux系统下安装、基本的操作命令及在Docker上进行项目部署等。未避免不必要的麻烦，请跟随本人学习Docekr时的实验环境。 环境 VMware Workstation Pro 12.X Ubuntu 16.04 LTS JDK 1.8.0_201 安装步骤所有操作均在Root用户下: 下载脚本 1# curl -fsSL get.docker.com -o get-docker.sh 安装 1# sh get-docker.sh --mirror AzureChinaCloud 更改镜像源 123456# cd /etc/docker# vi daemon.json输入&#123; &quot;registry-mirrors&quot;: [&quot;镜像源地址&quot;] &#125; 验证安装 12345678910111213141516171819# docker versionClient: Version: 18.09.3 API version: 1.39 Go version: go1.10.8 Git commit: 774a1f4 Built: Thu Feb 28 06:40:58 2019 OS/Arch: linux/amd64 Experimental: falseServer: Docker Engine - Community Engine: Version: 18.09.3 API version: 1.39 (minimum version 1.12) Go version: go1.10.8 Git commit: 774a1f4 Built: Thu Feb 28 05:59:55 2019 OS/Arch: linux/amd64 Experimental: false 常见比较快的国内镜像源：1、Docker 官方中国区 https://registry.docker-cn.com2、网易 http://hub-mirror.c.163.com3、USTC https://docker.mirrors.ustc.edu.cn]]></content>
      <tags>
        <tag>docker</tag>
        <tag>容器</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot]]></title>
    <url>%2Fspring-boot-1%2F</url>
    <content type="text"><![CDATA[待完善]]></content>
      <tags>
        <tag>springboot</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
</search>
